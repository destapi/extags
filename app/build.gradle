plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // jetty 11
    implementation 'org.eclipse.jetty:jetty-server:11.0.20';
    implementation 'org.eclipse.jetty:jetty-servlet:11.0.20';
    implementation 'org.eclipse.jetty.http2:http2-server:11.0.20';
    implementation 'org.eclipse.jetty:jetty-alpn-java-server:11.0.20';

    // template engine
    implementation 'org.mvel:mvel2:2.5.2.Final'

    // json
    implementation 'com.google.code.gson:gson:2.10.1'

    // commons cli
    implementation 'commons-cli:commons-cli:1.6.0'

    // logging
    implementation 'org.slf4j:slf4j-api:2.0.12';
    implementation 'org.slf4j:slf4j-simple:2.0.12'

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.assertj:assertj-core:3.25.3'
    testImplementation 'org.mockito:mockito-core:5.11.0'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'works.hop.eztag.template.GenTemplates'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
